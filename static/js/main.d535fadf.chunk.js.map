{"version":3,"sources":["components/ScoreList.js","components/MatchReport.js","App.js","serviceWorker.js","index.js"],"names":["ScoreList","findTeamDetail","team_id","property","teamData","filter","team","className","matchData","map","match","divLink","match_id","to","key","match_date","style","color","match_home_team_id","match_home_score","match_away_score","match_away_team_id","match_home_penalty_score","match_away_penalty_score","caclulateResultText","MatchReport","id","useParams","App","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wxJAQe,SAASA,IACtB,IAAMC,EAAiB,SAACC,EAASC,GAK/B,OAJgBC,EAASC,QAAO,SAACC,GAC/B,OAAOA,EAAKJ,UAAYA,KAGX,GAAGC,IAWpB,OACE,kBAAC,IAAD,KACE,yBAAKI,UAAU,WACZC,EAAUC,KAAI,SAACC,GACd,IAAMC,EAAO,iBAAaD,EAAME,UAChC,OACE,kBAAC,IAAD,CAAMC,GAAIF,GACR,yBAAKJ,UAAU,QAAQO,IAAKJ,EAAME,UAChC,yBAAKL,UAAU,QAAQG,EAAMK,YAC7B,yBAAKR,UAAU,YACb,0BACEA,UAAU,WACVS,MAAO,CACLC,MAAOhB,EACLS,EAAMQ,mBACN,sBAIHjB,EAAeS,EAAMQ,mBAAoB,cAE5C,0BAAMX,UAAU,aAAaG,EAAMS,kBACnC,0BAAMZ,UAAU,aAAaG,EAAMU,kBAEnC,0BACEb,UAAU,WACVS,MAAO,CACLC,MAAOhB,EACLS,EAAMW,mBACN,sBAIHpB,EAAeS,EAAMW,mBAAoB,eAG9C,yBAAKd,UAAU,eA5CD,SAACG,GAC3B,OAAKA,EAAMY,yBAGH,GAAN,OAAUZ,EAAMY,yBAAhB,cAA8CZ,EAAMa,yBAApD,YAFO,KA0CiCC,CAAoBd,WC1DnD,SAASe,IAAe,IAC7BC,EAAOC,cAAPD,GACR,OAAO,uCAAaA,GCgBPE,MAff,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,UAChB,kBAAC9B,EAAD,OAEF,kBAAC,IAAD,CAAO8B,KAAK,cACV,kBAACL,EAAD,UCFUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MACvB,2DCZNyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d535fadf.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nimport \"./scoreList.css\";\n\nimport matchData from \"../data/match-data.json\";\nimport teamData from \"../data/team-data.json\";\n\nexport default function ScoreList() {\n  const findTeamDetail = (team_id, property) => {\n    const teamObj = teamData.filter((team) => {\n      return team.team_id === team_id;\n    });\n\n    return teamObj[0][property];\n  };\n\n  const caclulateResultText = (match) => {\n    if (!match.match_home_penalty_score) {\n      return null;\n    } else {\n      return `${match.match_home_penalty_score} - ${match.match_away_penalty_score} on pens`;\n    }\n  };\n\n  return (\n    <Router>\n      <div className=\"matches\">\n        {matchData.map((match) => {\n          const divLink = `/games/${match.match_id}`;\n          return (\n            <Link to={divLink}>\n              <div className=\"match\" key={match.match_id}>\n                <div className=\"date\">{match.match_date}</div>\n                <div className=\"teamInfo\">\n                  <span\n                    className=\"teamName\"\n                    style={{\n                      color: findTeamDetail(\n                        match.match_home_team_id,\n                        \"team_first_color\"\n                      ),\n                    }}\n                  >\n                    {findTeamDetail(match.match_home_team_id, \"team_name\")}\n                  </span>\n                  <span className=\"teamScore\">{match.match_home_score}</span>\n                  <span className=\"teamScore\">{match.match_away_score}</span>\n\n                  <span\n                    className=\"teamName\"\n                    style={{\n                      color: findTeamDetail(\n                        match.match_away_team_id,\n                        \"team_first_color\"\n                      ),\n                    }}\n                  >\n                    {findTeamDetail(match.match_away_team_id, \"team_name\")}\n                  </span>\n                </div>\n                <div className=\"penaltyInfo\">{caclulateResultText(match)}</div>\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router\";\n\nexport default function MatchReport() {\n  const { id } = useParams();\n  return <div>Match: {id}</div>;\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport ScoreList from \"./components/ScoreList\";\nimport MatchReport from \"./components/MatchReport\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/games\">\n          <ScoreList />\n        </Route>\n        <Route path=\"/games/:id\">\n          <MatchReport />\n        </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}